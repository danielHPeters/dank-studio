{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/enum/ESoundType.ts","webpack:///./src/studio/widgets/KeyPad.ts","webpack:///./src/interfaces/IAdioItem.ts","webpack:///./src/studio/widgets/AudioItem.ts","webpack:///./src/studio/audio/Kick.ts","webpack:///./src/studio/audio/Snare.ts","webpack:///./src/studio/audio/Sound.ts","webpack:///./src/studio/input/Keyboard.ts","webpack:///./src/studio/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","ESoundType","default","[object Object]","id","keyBoard","this","element","document","getElementById","keySoundMap","forEach","sound","key","addKey","frequency","toString","text","newKey","createElement","span","textNode","createTextNode","textNode2","lineBreak","appendChild","classList","add","setAttribute","addEventListener","event","setDownEvent","setUpEvent","AudioItemStyles","IAdioItem_1","AUDIO_ITEM","init","stop","mapSoundToElement","keys","prop","propElement","isNaN","Number","type","AUDIO_ITEM_PROP","context","delay","currentTime","oscillator","createOscillator","gain","createGain","connect","destination","setValueAtTime","exponentialRampToValueAtTime","start","loop","noiseFrequency","noiseFilter","oscillatorType","noiseGain","oscillatorGain","noise","createBufferSource","time","createBiquadFilter","buffer","createNoiseBuffer","bufferSize","sampleRate","createBuffer","output","getChannelData","Math","random","compressor","linearRampToValueAtTime","Sound_1","Snare_1","Kick_1","ESoundType_1","AudioItem_1","KeyboardStyles","AudioContext","createDynamicsCompressor","Map","registeredInputs","initCompressor","registerKeyHandler","audioItem","body","error","console","log","NOTE","set","SNARE","KICK","HITHAT","undefined","ACTIVE","play","remove","threshold","knee","ratio","attack","release","window","Keyboard_1","KeyPad_1","keyPad","registerKey","addAllKeys"],"mappings":"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","file":"studio.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","export enum ESoundType {\r\n  KICK, SNARE, HITHAT, NOTE\r\n}","/**\r\n * Keypad Widget class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nimport Keyboard from '../input/Keyboard'\r\n\r\nexport default class KeyPad {\r\n  private id: string\r\n  private element: HTMLElement\r\n  private keyBoard: Keyboard\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {string} id\r\n   * @param {Keyboard} keyBoard\r\n   */\r\n  constructor (id: string, keyBoard: Keyboard) {\r\n    this.id = id\r\n    this.element = document.getElementById(this.id)\r\n    this.keyBoard = keyBoard\r\n  }\r\n\r\n  /**\r\n   * Add all keys registered on the keyboard to the keypad.\r\n   */\r\n  addAllKeys (): void {\r\n    this.keyBoard.keySoundMap.forEach((sound, key) => this.addKey(key, sound.frequency.toString()))\r\n  }\r\n\r\n  /**\r\n   * Add a key element.\r\n   *\r\n   * @param {string} id\r\n   * @param {string} text\r\n   */\r\n  private addKey (id: string, text: string): void {\r\n    const newKey = document.createElement('li')\r\n    const span = document.createElement('span')\r\n    const textNode = document.createTextNode(id)\r\n    const textNode2 = document.createTextNode(text)\r\n    const lineBreak = document.createElement('br')\r\n    span.appendChild(textNode)\r\n    span.appendChild(lineBreak)\r\n    span.appendChild(textNode2)\r\n    span.classList.add('keyDescription')\r\n    newKey.appendChild(span)\r\n    newKey.classList.add('key')\r\n    newKey.setAttribute('id', id)\r\n    newKey.addEventListener('mouseenter', event => this.keyBoard.setDownEvent(id))\r\n    newKey.addEventListener('touchstart', event => this.keyBoard.setDownEvent(id))\r\n    newKey.addEventListener('mouseleave', event => this.keyBoard.setUpEvent(id))\r\n    newKey.addEventListener('touchend', event => this.keyBoard.setUpEvent(id))\r\n    this.element.appendChild(newKey)\r\n  }\r\n}\r\n","import ISound from './ISound'\r\n\r\nexport enum AudioItemStyles {\r\n  AUDIO_ITEM = 'audio-item',\r\n  AUDIO_ITEM_PROP = 'audio-item-property'\r\n}\r\n\r\nexport default interface IAudioItem {\r\n  element: HTMLElement\r\n  sound: ISound      \r\n}\r\n","import ISound from '../../interfaces/ISound'\r\nimport IAudioItem, { AudioItemStyles } from '../../interfaces/IAdioItem'\r\n\r\n/**\r\n * Audio properties display element implementation.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class AudioItem implements IAudioItem {\r\n  element: HTMLElement\r\n  sound: ISound\r\n\r\n  constructor (id: string, sound: ISound) {\r\n    this.element = document.createElement('div')\r\n    this.element.id = id\r\n    this.element.classList.add(AudioItemStyles.AUDIO_ITEM)\r\n    this.sound = sound\r\n    this.element.addEventListener('mouseenter', () => this.sound.init())\r\n    this.element.addEventListener('mouseleave', () => this.sound.stop())\r\n    this.mapSoundToElement()\r\n  }\r\n\r\n  /**\r\n   * Map all attributes of the sound to a html element and add it to the container element.\r\n   */\r\n  private mapSoundToElement() {\r\n    Object.keys(this.sound).forEach(prop => {\r\n      const propElement = document.createElement('input') as HTMLInputElement\r\n\r\n      if (isNaN(Number(this.sound[prop]))) {\r\n        propElement.type = 'text'\r\n      } else {\r\n        propElement.type = 'number'\r\n      }\r\n      \r\n      propElement.classList.add(AudioItemStyles.AUDIO_ITEM_PROP)\r\n      propElement.value = this.sound[prop]\r\n      propElement.addEventListener('change', () => this.sound[prop] = propElement.value)\r\n      this.element.appendChild(propElement)\r\n    })\r\n  }\r\n}\r\n","import ISound from '../../interfaces/ISound'\r\n\r\n/**\r\n * Drum 'Kick'.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Kick implements ISound {\r\n  context: AudioContext\r\n  oscillator: OscillatorNode\r\n  gain: GainNode\r\n  frequency: number\r\n  volume: number\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioContext} context\r\n   * @param {number} frequency\r\n   */\r\n  constructor (context: AudioContext, frequency: number) {\r\n    this.context = context\r\n    this.frequency = frequency\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  init (): void {\r\n    const delay = this.context.currentTime\r\n    this.oscillator = this.context.createOscillator()\r\n    this.gain = this.context.createGain()\r\n    this.oscillator.connect(this.gain)\r\n    this.gain.connect(this.context.destination)\r\n    const delTime = 0.5\r\n    const rampValue = 0.01\r\n\r\n    this.oscillator.frequency.setValueAtTime(this.frequency, delay)\r\n    this.gain.gain.setValueAtTime(1, delay)\r\n\r\n    this.oscillator.frequency.exponentialRampToValueAtTime(rampValue, delay + delTime)\r\n    this.gain.gain.exponentialRampToValueAtTime(rampValue, delay + delTime)\r\n\r\n    this.oscillator.start(delay)\r\n\r\n    this.oscillator.stop(delay + delTime)\r\n  }\r\n\r\n  play (loop: boolean = false, delay: number = 0): void {\r\n\r\n  }\r\n\r\n  stop (delay: number = 0): void {\r\n\r\n  }\r\n}\r\n","import ISound from '../../interfaces/ISound'\r\n\r\n/**\r\n * Snare sound class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Snare implements ISound {\r\n  context: AudioContext\r\n  frequency: number\r\n  gain: GainNode\r\n  volume: number\r\n  private noise: AudioBufferSourceNode\r\n  private noiseFrequency: number\r\n  private noiseFilter: BiquadFilterType\r\n  private noiseGain: GainNode\r\n  private oscillatorType: OscillatorType\r\n  private oscillator: OscillatorNode\r\n  private oscillatorGain: GainNode\r\n  /**\r\n   *\r\n   * @param {AudioContext} context\r\n   * @param {number} frequency\r\n   * @param {number} noiseFrequency\r\n   * @param {string} noiseFilter\r\n   * @param {string} oscillatorType\r\n   */\r\n  constructor (context: AudioContext, frequency: number, noiseFrequency: number, noiseFilter: BiquadFilterType, oscillatorType: OscillatorType) {\r\n    this.context = context\r\n    this.frequency = frequency\r\n    this.noiseFrequency = noiseFrequency\r\n    this.noiseFilter = noiseFilter\r\n    this.oscillatorType = oscillatorType\r\n  }\r\n\r\n  init (): void {\r\n    this.noiseGain = this.context.createGain()\r\n    this.oscillatorGain = this.context.createGain()\r\n    this.gain = this.context.createGain()\r\n    this.noise = this.context.createBufferSource()\r\n    this.oscillator = this.context.createOscillator()\r\n    const time = this.context.currentTime\r\n    const noiseFilter = this.context.createBiquadFilter()\r\n    this.noise.buffer = this.createNoiseBuffer()\r\n    noiseFilter.type = this.noiseFilter\r\n    noiseFilter.frequency.value = this.noiseFrequency\r\n    this.noise.connect(noiseFilter)\r\n    noiseFilter.connect(this.noiseGain)\r\n    this.noiseGain.connect(this.gain)\r\n    this.oscillator.type = this.oscillatorType\r\n    this.oscillator.connect(this.oscillatorGain)\r\n    this.oscillatorGain.connect(this.gain)\r\n    this.gain.connect(this.context.destination)\r\n\r\n    this.noiseGain.gain.setValueAtTime(1, time)\r\n    this.noiseGain.gain.exponentialRampToValueAtTime(0.01, time + 0.2)\r\n\r\n    this.noise.start(time)\r\n\r\n    this.oscillator.frequency.setValueAtTime(this.frequency, time)\r\n    this.gain.gain.setValueAtTime(0.7, time)\r\n    this.gain.gain.exponentialRampToValueAtTime(0.01, time + 0.1)\r\n\r\n    this.oscillator.start(time)\r\n\r\n    this.oscillator.stop(time + 0.2)\r\n    this.noise.stop(time + 0.2)\r\n  }\r\n\r\n  play (loop: boolean = false, delay: number = 0): void {\r\n\r\n  }\r\n\r\n  stop (delay: number = 0): void {\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {AudioBuffer}\r\n   */\r\n  private createNoiseBuffer (): AudioBuffer {\r\n    const bufferSize = this.context.sampleRate\r\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate)\r\n    const output = buffer.getChannelData(0)\r\n\r\n    for (let i = 0; i < bufferSize; i++) {\r\n      output[i] = Math.random() * 2 - 1\r\n    }\r\n\r\n    return buffer\r\n  }\r\n}\r\n","import ISound from '../../interfaces/ISound'\r\n\r\n/**\r\n * Sound class\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Sound implements ISound {\r\n  context: AudioContext\r\n  gain: GainNode\r\n  frequency: number\r\n  volume: number\r\n  oscillatorType: OscillatorType\r\n  private compressor: DynamicsCompressorNode\r\n  private oscillator: OscillatorNode\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioContext} context\r\n   * @param {DynamicsCompressorNode} compressor\r\n   * @param {number} frequency\r\n   * @param {OscillatorType} oscillatorType\r\n   */\r\n  constructor (context: AudioContext, compressor: DynamicsCompressorNode, frequency: number, oscillatorType: OscillatorType) {\r\n    this.context = context\r\n    this.compressor = compressor\r\n    this.frequency = frequency\r\n    this.oscillatorType = oscillatorType\r\n  }\r\n\r\n  /**\r\n   * Connect to audio output and play sound.\r\n   */\r\n  init (): void {\r\n    this.oscillator = this.context.createOscillator()\r\n    this.gain = this.context.createGain()\r\n    this.gain.connect(this.compressor)\r\n    this.oscillator.type = this.oscillatorType\r\n    this.oscillator.frequency.value = this.frequency\r\n    this.oscillator.connect(this.gain)\r\n    this.gain.gain.setValueAtTime(0, this.context.currentTime)\r\n    this.gain.gain.linearRampToValueAtTime(0.4, this.context.currentTime + 0.1)\r\n    this.oscillator.start(0.5)\r\n  }\r\n\r\n  play (loop: boolean = false, delay: number = 0): void {\r\n\r\n  }\r\n\r\n  /**\r\n   * Stop sound.\r\n   */\r\n  stop (delay: number = 0): void {\r\n    this.gain.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.8)\r\n    this.oscillator.stop(this.context.currentTime + 2.8)\r\n  }\r\n}\r\n","import Sound from '../audio/Sound'\r\nimport ISound from '../../interfaces/ISound'\r\nimport Snare from '../audio/Snare'\r\nimport Kick from '../audio/Kick'\r\nimport { ESoundType } from '../../enum/ESoundType'\r\nimport AudioItem from '../widgets/AudioItem';\r\n\r\nexport enum KeyboardStyles {\r\n  ACTIVE = 'keyActive'\r\n}\r\n\r\n/**\r\n * Keyboard class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Keyboard {\r\n  context: AudioContext\r\n  compressor: DynamicsCompressorNode\r\n  keySoundMap: Map<string, ISound>\r\n  registeredInputs: Map<string, boolean>\r\n  /**\r\n   * Constructor.\r\n   */\r\n  constructor () {\r\n    try {\r\n      this.context = new AudioContext()\r\n      this.compressor = this.context.createDynamicsCompressor()\r\n      // this.gainNode = this.context.createGain()\r\n      this.keySoundMap = new Map<string, ISound>()\r\n      this.registeredInputs = new Map<string, boolean>()\r\n\r\n      // this.gainNode.noiseGain.value = 1\r\n      // this.gainNode.connect(this.context.destination)\r\n      this.initCompressor()\r\n      this.registerKeyHandler()\r\n      const audioItem = new AudioItem('test', new Sound(this.context, this.compressor, 440, 'sine'))\r\n      document.body.appendChild(audioItem.element)\r\n    } catch (error) {\r\n      console.log('This browser does not support Web Audio API.', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a keyboard key with a sound\r\n   *\r\n   * @param {string} key\r\n   * @param {number} frequency\r\n   * @param {ESoundType} type\r\n   * @param {OscillatorType} oscillatorType\r\n   */\r\n  registerKey (key: string, frequency: number, type: ESoundType = ESoundType.NOTE, oscillatorType: OscillatorType = 'square'): void {\r\n    switch (type) {\r\n      case ESoundType.NOTE:\r\n        this.keySoundMap.set(key, new Sound(this.context, this.compressor, frequency, oscillatorType))\r\n        break\r\n      case ESoundType.SNARE:\r\n        this.keySoundMap.set(key, new Snare(this.context, frequency, 1000, 'highpass', 'triangle'))\r\n        break\r\n      case ESoundType.KICK:\r\n        this.keySoundMap.set(key, new Kick(this.context, frequency))\r\n        break\r\n      case ESoundType.HITHAT:\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} key\r\n   */\r\n  setDownEvent (key: string) {\r\n    if (!this.registeredInputs.get(key) && this.keySoundMap.get(key) !== undefined) {\r\n      document.getElementById(key).classList.add(KeyboardStyles.ACTIVE)\r\n      this.keySoundMap.get(key).init()\r\n      this.keySoundMap.get(key).play()\r\n      this.registeredInputs.set(key, true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} key\r\n   */\r\n  setUpEvent (key: string): void {\r\n    if (this.registeredInputs.get(key) && this.keySoundMap.get(key) !== undefined) {\r\n      document.getElementById(key).classList.remove(KeyboardStyles.ACTIVE)\r\n      this.keySoundMap.get(key).stop()\r\n      this.registeredInputs.set(key, false)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the compressor to fix audio clipping.\r\n   */\r\n  private initCompressor (): void {\r\n    this.compressor.threshold.value = -50\r\n    this.compressor.knee.value = 40\r\n    this.compressor.ratio.value = 12\r\n    this.compressor.attack.value = 0\r\n    this.compressor.release.value = 0.25\r\n    this.compressor.connect(this.context.destination)\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private registerKeyHandler (): void {\r\n    window.addEventListener('keydown', event => this.setDownEvent(event.key))\r\n    window.addEventListener('keyup', event => this.setUpEvent(event.key))\r\n  }\r\n}\r\n","import KeyBoard from './input/Keyboard'\r\nimport KeyPad from './widgets/KeyPad'\r\nimport { ESoundType } from '../enum/ESoundType'\r\n\r\n/**\r\n * Init script. Set all keys here.\r\n * \r\n * @author Daniel Peters\r\n * @version 1.1\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const keyBoard = new KeyBoard()\r\n  const keyPad = new KeyPad('keyPad', keyBoard)\r\n\r\n  keyBoard.registerKey('a', 261.63)\r\n  keyBoard.registerKey('s', 293.66)\r\n  keyBoard.registerKey('d', 329.63)\r\n  keyBoard.registerKey('f', 349.23)\r\n  keyBoard.registerKey('g', 392.00)\r\n  keyBoard.registerKey('h', 440)\r\n  keyBoard.registerKey('j', 493.88)\r\n  keyBoard.registerKey('k', 523.25)\r\n  keyBoard.registerKey('q', 150, ESoundType.KICK)\r\n  keyBoard.registerKey('w', 100, ESoundType.SNARE)\r\n  keyPad.addAllKeys()\r\n})\r\n"],"sourceRoot":""}