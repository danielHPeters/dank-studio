{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/enum/ESoundType.ts","webpack:///./src/studio/widgets/KeyPad.ts","webpack:///./src/studio/audio/Kick.ts","webpack:///./src/studio/audio/Sound.ts","webpack:///./src/studio/audio/Snare.ts","webpack:///./src/factory/SoundFactory.ts","webpack:///./src/studio/input/Keyboard.ts","webpack:///./src/studio/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","ESoundType","default","[object Object]","id","keyBoard","this","element","document","getElementById","keySoundMap","forEach","sound","key","addKey","frequency","toString","text","newKey","createElement","span","textNode","createTextNode","textNode2","lineBreak","appendChild","classList","add","setAttribute","addEventListener","event","setDownEvent","setUpEvent","context","compressor","delay","currentTime","oscillator","createOscillator","gain","createGain","connect","setValueAtTime","exponentialRampToValueAtTime","start","stop","loop","oscillatorType","type","linearRampToValueAtTime","noiseFrequency","noiseFilter","noiseGain","oscillatorGain","noise","createBufferSource","time","createBiquadFilter","buffer","createNoiseBuffer","bufferSize","sampleRate","createBuffer","output","getChannelData","Math","random","ESoundType_1","Snare_1","Sound_1","Kick_1","NOTE","SNARE","KICK","HITHAT","Error","SoundFactory_1","KeyboardStyles","AudioContext","masterGain","createDynamicsCompressor","soundFactory","Map","registeredInputs","destination","initCompressor","registerKeyHandler","error","console","log","set","create","undefined","ACTIVE","init","play","remove","threshold","knee","ratio","attack","release","window","Keyboard_1","KeyPad_1","keyPad","audioSliderLabel","audioSlider","htmlFor","textContent","Number","max","min","step","body","registerKey","addAllKeys"],"mappings":"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","file":"studio.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","export enum ESoundType {\n  KICK, SNARE, HITHAT, NOTE\n}","/**\n * Keypad Widget class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nimport Keyboard from '../input/Keyboard'\n\nexport default class KeyPad {\n  private id: string\n  private element: HTMLElement\n  private keyBoard: Keyboard\n  /**\n   * Constructor.\n   *\n   * @param {string} id\n   * @param {Keyboard} keyBoard\n   */\n  constructor (id: string, keyBoard: Keyboard) {\n    this.id = id\n    this.element = document.getElementById(this.id)\n    this.keyBoard = keyBoard\n  }\n\n  /**\n   * Add all keys registered on the keyboard to the keypad.\n   */\n  addAllKeys (): void {\n    this.keyBoard.keySoundMap.forEach((sound, key) => this.addKey(key, sound.frequency.toString()))\n  }\n\n  /**\n   * Add a key element.\n   *\n   * @param {string} id\n   * @param {string} text\n   */\n  private addKey (id: string, text: string): void {\n    const newKey = document.createElement('li')\n    const span = document.createElement('span')\n    const textNode = document.createTextNode(id)\n    const textNode2 = document.createTextNode(text)\n    const lineBreak = document.createElement('br')\n    span.appendChild(textNode)\n    span.appendChild(lineBreak)\n    span.appendChild(textNode2)\n    span.classList.add('keyDescription')\n    newKey.appendChild(span)\n    newKey.classList.add('key')\n    newKey.setAttribute('id', id)\n    newKey.addEventListener('mouseenter', event => this.keyBoard.setDownEvent(id))\n    newKey.addEventListener('touchstart', event => this.keyBoard.setDownEvent(id))\n    newKey.addEventListener('mouseleave', event => this.keyBoard.setUpEvent(id))\n    newKey.addEventListener('touchend', event => this.keyBoard.setUpEvent(id))\n    this.element.appendChild(newKey)\n  }\n}\n","import ISound from '../../interfaces/ISound'\n\n/**\n * Drum 'Kick'.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Kick implements ISound {\n  context: AudioContext\n  compressor: DynamicsCompressorNode\n  oscillator: OscillatorNode\n  gain: GainNode\n  frequency: number\n  volume: number\n\n  /**\n   * Constructor.\n   *\n   * @param {AudioContext} context\n   * @param {number} frequency\n   */\n  constructor (context: AudioContext, compressor: DynamicsCompressorNode, frequency: number) {\n    this.context = context\n    this.compressor = compressor\n    this.frequency = frequency\n  }\n\n  /**\n   *\n   */\n  init (): void {\n    const delay = this.context.currentTime\n    this.oscillator = this.context.createOscillator()\n    this.gain = this.context.createGain()\n    this.oscillator.connect(this.gain)\n    this.gain.connect(this.compressor)\n    const delTime = 0.5\n    const rampValue = 0.01\n\n    this.oscillator.frequency.setValueAtTime(this.frequency, delay)\n    this.gain.gain.setValueAtTime(1, delay)\n\n    this.oscillator.frequency.exponentialRampToValueAtTime(rampValue, delay + delTime)\n    this.gain.gain.exponentialRampToValueAtTime(rampValue, delay + delTime)\n\n    this.oscillator.start(delay)\n\n    this.oscillator.stop(delay + delTime)\n  }\n\n  play (loop: boolean = false, delay: number = 0): void {\n\n  }\n\n  stop (delay: number = 0): void {\n\n  }\n}\n","import ISound from '../../interfaces/ISound'\n\n/**\n * Sound class\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Sound implements ISound {\n  context: AudioContext\n  gain: GainNode\n  frequency: number\n  volume: number\n  oscillatorType: OscillatorType\n  private compressor: DynamicsCompressorNode\n  private oscillator: OscillatorNode\n\n  /**\n   * Constructor.\n   *\n   * @param {AudioContext} context\n   * @param {DynamicsCompressorNode} compressor\n   * @param {number} frequency\n   * @param {OscillatorType} oscillatorType\n   */\n  constructor (context: AudioContext, compressor: DynamicsCompressorNode, frequency: number, oscillatorType: OscillatorType) {\n    this.context = context\n    this.compressor = compressor\n    this.frequency = frequency\n    this.oscillatorType = oscillatorType\n  }\n\n  /**\n   * Connect to audio output and play sound.\n   */\n  init (): void {\n    this.oscillator = this.context.createOscillator()\n    this.gain = this.context.createGain()\n    this.gain.connect(this.compressor)\n    this.oscillator.type = this.oscillatorType\n    this.oscillator.frequency.value = this.frequency\n    this.oscillator.connect(this.gain)\n    this.gain.gain.setValueAtTime(0, this.context.currentTime)\n    this.gain.gain.linearRampToValueAtTime(0.4, this.context.currentTime + 0.1)\n    this.oscillator.start(0.5)\n  }\n\n  play (loop: boolean = false, delay: number = 0): void {\n\n  }\n\n  /**\n   * Stop sound.\n   */\n  stop (delay: number = 0): void {\n    this.gain.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.8)\n    this.oscillator.stop(this.context.currentTime + 2.8)\n  }\n}\n","import ISound from '../../interfaces/ISound'\n\n/**\n * Snare sound class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Snare implements ISound {\n  context: AudioContext\n  compressor: DynamicsCompressorNode\n  frequency: number\n  gain: GainNode\n  volume: number\n  private noise: AudioBufferSourceNode\n  private noiseFrequency: number\n  private noiseFilter: BiquadFilterType\n  private noiseGain: GainNode\n  private oscillatorType: OscillatorType\n  private oscillator: OscillatorNode\n  private oscillatorGain: GainNode\n  /**\n   *\n   * @param {AudioContext} context\n   * @param {number} frequency\n   * @param {number} noiseFrequency\n   * @param {string} noiseFilter\n   * @param {string} oscillatorType\n   */\n  constructor (context: AudioContext, compressor: DynamicsCompressorNode, frequency: number, noiseFrequency: number, noiseFilter: BiquadFilterType, oscillatorType: OscillatorType) {\n    this.context = context\n    this.compressor = compressor\n    this.frequency = frequency\n    this.noiseFrequency = noiseFrequency\n    this.noiseFilter = noiseFilter\n    this.oscillatorType = oscillatorType\n  }\n\n  init (): void {\n    this.noiseGain = this.context.createGain()\n    this.oscillatorGain = this.context.createGain()\n    this.gain = this.context.createGain()\n    this.noise = this.context.createBufferSource()\n    this.oscillator = this.context.createOscillator()\n    const time = this.context.currentTime\n    const noiseFilter = this.context.createBiquadFilter()\n    this.noise.buffer = this.createNoiseBuffer()\n    noiseFilter.type = this.noiseFilter\n    noiseFilter.frequency.value = this.noiseFrequency\n    this.noise.connect(noiseFilter)\n    noiseFilter.connect(this.noiseGain)\n    this.noiseGain.connect(this.gain)\n    this.oscillator.type = this.oscillatorType\n    this.oscillator.connect(this.oscillatorGain)\n    this.oscillatorGain.connect(this.gain)\n    this.gain.connect(this.compressor)\n\n    this.noiseGain.gain.setValueAtTime(1, time)\n    this.noiseGain.gain.exponentialRampToValueAtTime(0.01, time + 0.2)\n\n    this.noise.start(time)\n\n    this.oscillator.frequency.setValueAtTime(this.frequency, time)\n    this.gain.gain.setValueAtTime(0.7, time)\n    this.gain.gain.exponentialRampToValueAtTime(0.01, time + 0.1)\n\n    this.oscillator.start(time)\n\n    this.oscillator.stop(time + 0.2)\n    this.noise.stop(time + 0.2)\n  }\n\n  play (loop: boolean = false, delay: number = 0): void {\n\n  }\n\n  stop (delay: number = 0): void {\n\n  }\n\n  /**\n   *\n   * @returns {AudioBuffer}\n   */\n  private createNoiseBuffer (): AudioBuffer {\n    const bufferSize = this.context.sampleRate\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate)\n    const output = buffer.getChannelData(0)\n\n    for (let i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1\n    }\n\n    return buffer\n  }\n}\n","import { ESoundType } from '../enum/ESoundType'\nimport Snare from '../studio/audio/Snare'\nimport Sound from '../studio/audio/Sound'\nimport ISound from '../interfaces/ISound'\nimport Kick from '../studio/audio/Kick'\n\n/**\n * Factory for ISound object.\n * \n * @author Daniel Peters\n * @version 1.0\n */\nexport default class SoundFactory {\n  context: AudioContext\n  compressor: DynamicsCompressorNode\n\n  /**\n   * Constructor.\n   * \n   * @param {AudioContext} context Application audio context\n   * @param {DynamicsCompressorNode} compressor Compressor used to fix clipping\n   */\n  constructor (context: AudioContext, compressor: DynamicsCompressorNode) {\n    this.context = context\n    this.compressor = compressor\n  }\n  /**\n   * Create a sound object with the specified parameters.\n   *\n   * @param {number} frequency\n   * @param {ESoundType} type\n   * @param {OscillatorType} oscillatorType\n   */\n    create (frequency: number, type: ESoundType = ESoundType.NOTE, oscillatorType: OscillatorType = 'square'): ISound {\n      switch (type) {\n        case ESoundType.NOTE:\n          return new Sound(this.context, this.compressor, frequency, oscillatorType)\n        case ESoundType.SNARE:\n          return new Snare(this.context, this.compressor, frequency, 1000, 'highpass', 'triangle')\n        case ESoundType.KICK:\n          return new Kick(this.context, this.compressor, frequency)\n        case ESoundType.HITHAT:\n          throw new Error('Not Implemented!')\n      }\n  }\n}\n","import Sound from '../audio/Sound'\nimport ISound from '../../interfaces/ISound'\nimport Snare from '../audio/Snare'\nimport Kick from '../audio/Kick'\nimport { ESoundType } from '../../enum/ESoundType'\nimport AudioItem from '../widgets/AudioItem';\nimport SoundFactory from '../../factory/SoundFactory';\n\nexport enum KeyboardStyles {\n  ACTIVE = 'keyActive'\n}\n\n/**\n * Keyboard class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Keyboard {\n  context: AudioContext\n  masterGain: GainNode\n  compressor: DynamicsCompressorNode\n  keySoundMap: Map<string, ISound>\n  registeredInputs: Map<string, boolean>\n  soundFactory: SoundFactory\n  /**\n   * Constructor.\n   */\n  constructor () {\n    try {\n      this.context = new AudioContext()\n      this.masterGain = this.context.createGain()\n      this.compressor = this.context.createDynamicsCompressor()\n      this.soundFactory = new SoundFactory(this.context, this.compressor)\n      this.keySoundMap = new Map<string, ISound>()\n      this.registeredInputs = new Map<string, boolean>()\n      this.masterGain.connect(this.context.destination)\n      this.initCompressor()\n      this.registerKeyHandler()\n    } catch (error) {\n      console.log('This browser does not support Web Audio API.', error)\n    }\n  }\n\n  /**\n   * Register a keyboard key with a sound\n   *\n   * @param {string} key\n   * @param {number} frequency\n   * @param {ESoundType} type\n   * @param {OscillatorType} oscillatorType\n   */\n  registerKey (key: string, frequency: number, type: ESoundType = ESoundType.NOTE, oscillatorType: OscillatorType = 'square'): void {\n    this.keySoundMap.set(key, this.soundFactory.create(frequency, type, oscillatorType))\n  }\n\n  /**\n   *\n   * @param {string} key\n   */\n  setDownEvent (key: string) {\n    if (!this.registeredInputs.get(key) && this.keySoundMap.get(key) !== undefined) {\n      document.getElementById(key).classList.add(KeyboardStyles.ACTIVE)\n      this.keySoundMap.get(key).init()\n      this.keySoundMap.get(key).play()\n      this.registeredInputs.set(key, true)\n    }\n  }\n\n  /**\n   *\n   * @param {string} key\n   */\n  setUpEvent (key: string): void {\n    if (this.registeredInputs.get(key) && this.keySoundMap.get(key) !== undefined) {\n      document.getElementById(key).classList.remove(KeyboardStyles.ACTIVE)\n      this.keySoundMap.get(key).stop()\n      this.registeredInputs.set(key, false)\n    }\n  }\n\n  /**\n   * Initialize the compressor to fix audio clipping.\n   */\n  private initCompressor (): void {\n    this.compressor.threshold.value = -50\n    this.compressor.knee.value = 40\n    this.compressor.ratio.value = 12\n    this.compressor.attack.value = 0\n    this.compressor.release.value = 0.25\n    this.compressor.connect(this.masterGain)\n  }\n\n  /**\n   *\n   */\n  private registerKeyHandler (): void {\n    window.addEventListener('keydown', event => this.setDownEvent(event.key))\n    window.addEventListener('keyup', event => this.setUpEvent(event.key))\n  }\n}\n","import KeyBoard from './input/Keyboard'\nimport KeyPad from './widgets/KeyPad'\nimport { ESoundType } from '../enum/ESoundType'\n\n/**\n * Init script. Set all keys here.\n * \n * @author Daniel Peters\n * @version 1.1\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  const keyBoard = new KeyBoard()\n  const keyPad = new KeyPad('keyPad', keyBoard)\n  const audioSliderLabel = document.createElement('label') as HTMLLabelElement\n  const audioSlider = document.createElement('input') as HTMLInputElement\n  const audioSliderId = 'volume'\n  audioSliderLabel.htmlFor = audioSliderId\n  audioSliderLabel.textContent = 'Adjust Volume'\n  audioSlider.id = audioSliderId\n  audioSlider.type = 'range'\n  audioSlider.addEventListener('change', () => keyBoard.masterGain.gain.value = Number(audioSlider.value))\n  audioSlider.max = \"1\"\n  audioSlider.min = \"0\"\n  audioSlider.step = \"0.1\"\n  document.body.appendChild(audioSliderLabel)\n  document.body.appendChild(audioSlider)\n\n  keyBoard.registerKey('a', 261.63)\n  keyBoard.registerKey('s', 293.66)\n  keyBoard.registerKey('d', 329.63)\n  keyBoard.registerKey('f', 349.23)\n  keyBoard.registerKey('g', 392.00)\n  keyBoard.registerKey('h', 440)\n  keyBoard.registerKey('j', 493.88)\n  keyBoard.registerKey('k', 523.25)\n  keyBoard.registerKey('q', 150, ESoundType.KICK)\n  keyBoard.registerKey('w', 100, ESoundType.SNARE)\n  keyPad.addAllKeys()\n})\n"],"sourceRoot":""}