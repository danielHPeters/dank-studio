{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/enum/ESoundType.ts","webpack:///./src/studio/widgets/KeyPad.ts","webpack:///./src/studio/audio/Kick.ts","webpack:///./src/studio/audio/Snare.ts","webpack:///./src/studio/audio/Sound.ts","webpack:///./src/studio/input/Keyboard.ts","webpack:///./src/studio/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","ESoundType","default","[object Object]","id","keyBoard","this","element","document","getElementById","text","newKey","createElement","span","textNode","createTextNode","textNode2","lineBreak","appendChild","classList","add","setAttribute","addEventListener","event","setDownEvent","setUpEvent","keySoundMap","forEach","sound","key","addKey","frequency","toString","context","delay","currentTime","oscillator","createOscillator","gain","createGain","connect","destination","setValueAtTime","exponentialRampToValueAtTime","start","stop","loop","noiseFrequency","noiseFilter","oscillatorType","bufferSize","sampleRate","buffer","createBuffer","output","getChannelData","Math","random","noiseGain","oscillatorGain","noise","createBufferSource","time","createBiquadFilter","createNoiseBuffer","type","compressor","linearRampToValueAtTime","Sound_1","Snare_1","Kick_1","ESoundType_1","KeyboardStyles","AudioContext","createDynamicsCompressor","Map","registeredInputs","initCompressor","registerKeyHandler","error","console","log","NOTE","set","SNARE","KICK","HITHAT","undefined","ACTIVE","init","play","remove","threshold","knee","ratio","attack","release","window","Keyboard_1","KeyPad_1","keyPad","registerKey","addAllKeys"],"mappings":"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","file":"studio.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","export enum ESoundType {\r\n  KICK, SNARE, HITHAT, NOTE\r\n}","/**\r\n * Keypad Widget class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nimport Keyboard from '../input/Keyboard'\r\n\r\nexport default class KeyPad {\r\n  private id: string\r\n  private element: HTMLElement\r\n  private keyBoard: Keyboard\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {string} id\r\n   * @param {Keyboard} keyBoard\r\n   */\r\n  constructor (id: string, keyBoard: Keyboard) {\r\n    this.id = id\r\n    this.element = document.getElementById(this.id)\r\n    this.keyBoard = keyBoard\r\n  }\r\n\r\n  /**\r\n   * Add a key element.\r\n   *\r\n   * @param {string} id\r\n   * @param {string} text\r\n   */\r\n  private addKey (id: string, text: string): void {\r\n    const newKey = document.createElement('li')\r\n    const span = document.createElement('span')\r\n    const textNode = document.createTextNode(id)\r\n    const textNode2 = document.createTextNode(text)\r\n    const lineBreak = document.createElement('br')\r\n    span.appendChild(textNode)\r\n    span.appendChild(lineBreak)\r\n    span.appendChild(textNode2)\r\n    span.classList.add('keyDescription')\r\n    newKey.appendChild(span)\r\n    newKey.classList.add('key')\r\n    newKey.setAttribute('id', id)\r\n    newKey.addEventListener('mouseenter', event => this.keyBoard.setDownEvent(id))\r\n    newKey.addEventListener('touchstart', event => this.keyBoard.setDownEvent(id))\r\n    newKey.addEventListener('mouseleave', event => this.keyBoard.setUpEvent(id))\r\n    newKey.addEventListener('touchend', event => this.keyBoard.setUpEvent(id))\r\n    this.element.appendChild(newKey)\r\n  }\r\n\r\n  /**\r\n   * Add all keys registered on the keyboard to the keypad.\r\n   */\r\n  public addAllKeys (): void {\r\n    this.keyBoard.keySoundMap.forEach((sound, key) => this.addKey(key, sound.frequency.toString()))\r\n    //Object.keys(this.keyBoard.keySoundMap).forEach(key => this.addKey(key, this.keyBoard.keySoundMap.get(key).frequency.toString()))\r\n  }\r\n}\r\n","import ISound from '../../interfaces/ISound'\r\n\r\n/**\r\n * Drum 'Kick'.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Kick implements ISound {\r\n  public context: AudioContext\r\n  public oscillator: OscillatorNode\r\n  public gain: GainNode\r\n  public frequency: number\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioContext} context\r\n   * @param {number} frequency\r\n   */\r\n  constructor (context: AudioContext, frequency: number) {\r\n    this.context = context\r\n    this.frequency = frequency\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  public init (): void {\r\n    const delay = this.context.currentTime\r\n    this.oscillator = this.context.createOscillator()\r\n    this.gain = this.context.createGain()\r\n    this.oscillator.connect(this.gain)\r\n    this.gain.connect(this.context.destination)\r\n    const delTime = 0.5\r\n    const rampValue = 0.01\r\n\r\n    this.oscillator.frequency.setValueAtTime(this.frequency, delay)\r\n    this.gain.gain.setValueAtTime(1, delay)\r\n\r\n    this.oscillator.frequency.exponentialRampToValueAtTime(rampValue, delay + delTime)\r\n    this.gain.gain.exponentialRampToValueAtTime(rampValue, delay + delTime)\r\n\r\n    this.oscillator.start(delay)\r\n\r\n    this.oscillator.stop(delay + delTime)\r\n  }\r\n\r\n  public play (loop: boolean = false, delay: number = 0): void {\r\n\r\n  }\r\n\r\n  public stop (delay: number = 0): void {\r\n\r\n  }\r\n}\r\n","import ISound from '../../interfaces/ISound'\r\n\r\n/**\r\n * Snare sound class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Snare implements ISound {\r\n  public context: AudioContext\r\n  public frequency: number\r\n  public gain: GainNode\r\n  private noise: AudioBufferSourceNode\r\n  private noiseFrequency: number\r\n  private noiseFilter: BiquadFilterType\r\n  private noiseGain: GainNode\r\n  private oscillatorType: OscillatorType\r\n  private oscillator: OscillatorNode\r\n  private oscillatorGain: GainNode\r\n  /**\r\n   *\r\n   * @param {AudioContext} context\r\n   * @param {number} frequency\r\n   * @param {number} noiseFrequency\r\n   * @param {string} noiseFilter\r\n   * @param {string} oscillatorType\r\n   */\r\n  constructor (context: AudioContext, frequency: number, noiseFrequency: number, noiseFilter: BiquadFilterType, oscillatorType: OscillatorType) {\r\n    this.context = context\r\n    this.frequency = frequency\r\n    this.noiseFrequency = noiseFrequency\r\n    this.noiseFilter = noiseFilter\r\n    this.oscillatorType = oscillatorType\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {AudioBuffer}\r\n   */\r\n  private createNoiseBuffer (): AudioBuffer {\r\n    const bufferSize = this.context.sampleRate\r\n    const buffer = this.context.createBuffer(1, bufferSize, this.context.sampleRate)\r\n    const output = buffer.getChannelData(0)\r\n\r\n    for (let i = 0; i < bufferSize; i++) {\r\n      output[i] = Math.random() * 2 - 1\r\n    }\r\n\r\n    return buffer\r\n  }\r\n\r\n  public init (): void {\r\n    this.noiseGain = this.context.createGain()\r\n    this.oscillatorGain = this.context.createGain()\r\n    this.gain = this.context.createGain()\r\n    this.noise = this.context.createBufferSource()\r\n    this.oscillator = this.context.createOscillator()\r\n    const time = this.context.currentTime\r\n    const noiseFilter = this.context.createBiquadFilter()\r\n    this.noise.buffer = this.createNoiseBuffer()\r\n    noiseFilter.type = this.noiseFilter\r\n    noiseFilter.frequency.value = this.noiseFrequency\r\n    this.noise.connect(noiseFilter)\r\n    noiseFilter.connect(this.noiseGain)\r\n    this.noiseGain.connect(this.gain)\r\n    this.oscillator.type = this.oscillatorType\r\n    this.oscillator.connect(this.oscillatorGain)\r\n    this.oscillatorGain.connect(this.gain)\r\n    this.gain.connect(this.context.destination)\r\n\r\n    this.noiseGain.gain.setValueAtTime(1, time)\r\n    this.noiseGain.gain.exponentialRampToValueAtTime(0.01, time + 0.2)\r\n\r\n    this.noise.start(time)\r\n\r\n    this.oscillator.frequency.setValueAtTime(this.frequency, time)\r\n    this.gain.gain.setValueAtTime(0.7, time)\r\n    this.gain.gain.exponentialRampToValueAtTime(0.01, time + 0.1)\r\n\r\n    this.oscillator.start(time)\r\n\r\n    this.oscillator.stop(time + 0.2)\r\n    this.noise.stop(time + 0.2)\r\n  }\r\n\r\n  public play (loop: boolean = false, delay: number = 0): void {\r\n\r\n  }\r\n\r\n  public stop (delay: number = 0): void {\r\n\r\n  }\r\n}\r\n","import ISound from '../../interfaces/ISound'\r\n\r\n/**\r\n * Sound class\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Sound implements ISound {\r\n  public context: AudioContext\r\n  public gain: GainNode\r\n  public frequency: number\r\n  private compressor: DynamicsCompressorNode\r\n  private oscillator: OscillatorNode\r\n  public oscillatorType: OscillatorType\r\n\r\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {AudioContext} context\r\n   * @param {DynamicsCompressorNode} compressor\r\n   * @param {number} frequency\r\n   * @param {OscillatorType} oscillatorType\r\n   */\r\n  constructor (context: AudioContext, compressor: DynamicsCompressorNode, frequency: number, oscillatorType: OscillatorType) {\r\n    this.context = context\r\n    this.compressor = compressor\r\n    this.frequency = frequency\r\n    this.oscillatorType = oscillatorType\r\n  }\r\n\r\n  /**\r\n   * Connect to audio output and play sound.\r\n   */\r\n  public init (): void {\r\n    this.oscillator = this.context.createOscillator()\r\n    this.gain = this.context.createGain()\r\n    this.gain.connect(this.compressor)\r\n    this.oscillator.type = this.oscillatorType\r\n    this.oscillator.frequency.value = this.frequency\r\n    this.oscillator.connect(this.gain)\r\n    this.gain.gain.setValueAtTime(0, this.context.currentTime)\r\n    this.gain.gain.linearRampToValueAtTime(0.4, this.context.currentTime + 0.1)\r\n    this.oscillator.start(0.5)\r\n  }\r\n\r\n  public play (loop: boolean = false, delay: number = 0): void {\r\n\r\n  }\r\n\r\n  /**\r\n   * Stop sound.\r\n   */\r\n  public stop (delay: number = 0): void {\r\n    this.gain.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.8)\r\n    this.oscillator.stop(this.context.currentTime + 2.8)\r\n  }\r\n}\r\n","import Sound from '../audio/Sound'\r\nimport ISound from '../../interfaces/ISound'\r\nimport Snare from '../audio/Snare'\r\nimport Kick from '../audio/Kick'\r\nimport { ESoundType } from '../../enum/ESoundType'\r\n\r\nexport enum KeyboardStyles {\r\n  ACTIVE = 'keyActive'\r\n}\r\n\r\n/**\r\n * Keyboard class.\r\n *\r\n * @author Daniel Peters\r\n * @version 1.0\r\n */\r\nexport default class Keyboard {\r\n  context: AudioContext\r\n  compressor: DynamicsCompressorNode\r\n  keySoundMap: Map<string, ISound>\r\n  registeredInputs: Map<string, boolean>\r\n  /**\r\n   * Constructor.\r\n   */\r\n  constructor () {\r\n    try {\r\n      this.context = new AudioContext()\r\n      this.compressor = this.context.createDynamicsCompressor()\r\n      // this.gainNode = this.context.createGain()\r\n      this.keySoundMap = new Map<string, ISound>()\r\n      this.registeredInputs = new Map<string, boolean>()\r\n\r\n      // this.gainNode.noiseGain.value = 1\r\n      // this.gainNode.connect(this.context.destination)\r\n      this.initCompressor()\r\n      this.registerKeyHandler()\r\n    } catch (error) {\r\n      console.log('This browser does not support Web Audio API.', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a keyboard key with a sound\r\n   *\r\n   * @param {string} key\r\n   * @param {number} frequency\r\n   * @param {ESoundType} type\r\n   * @param {OscillatorType} oscillatorType\r\n   */\r\n  public registerKey (key: string, frequency: number, type: ESoundType = ESoundType.NOTE, oscillatorType: OscillatorType = 'sawtooth'): void {\r\n    switch (type) {\r\n      case ESoundType.NOTE:\r\n        this.keySoundMap.set(key, new Sound(this.context, this.compressor, frequency, oscillatorType))\r\n        break\r\n      case ESoundType.SNARE:\r\n        this.keySoundMap.set(key, new Snare(this.context, frequency, 1000, 'highpass', 'triangle'))\r\n        break\r\n      case ESoundType.KICK:\r\n        this.keySoundMap.set(key, new Kick(this.context, frequency))\r\n        break\r\n      case ESoundType.HITHAT:\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} key\r\n   */\r\n  public setDownEvent (key: string) {\r\n    if (!this.registeredInputs.get(key) !== undefined && this.keySoundMap.get(key) !== undefined) {\r\n      document.getElementById(key).classList.add(KeyboardStyles.ACTIVE)\r\n      this.keySoundMap.get(key).init()\r\n      this.keySoundMap.get(key).play()\r\n      this.registeredInputs.set(key, true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} key\r\n   */\r\n  public setUpEvent (key: string): void {\r\n    if (this.registeredInputs.get(key) !== undefined && this.keySoundMap.get(key) !== undefined) {\r\n      document.getElementById(key).classList.remove(KeyboardStyles.ACTIVE)\r\n      this.keySoundMap.get(key).stop()\r\n      this.registeredInputs.set(key, false)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the compressor to fix audio clipping.\r\n   */\r\n  private initCompressor (): void {\r\n    this.compressor.threshold.value = -50\r\n    this.compressor.knee.value = 40\r\n    this.compressor.ratio.value = 12\r\n    this.compressor.attack.value = 0\r\n    this.compressor.release.value = 0.25\r\n    this.compressor.connect(this.context.destination)\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private registerKeyHandler (): void {\r\n    window.addEventListener('keydown', event => this.setDownEvent(event.key))\r\n    window.addEventListener('keyup', event => this.setUpEvent(event.key))\r\n  }\r\n}\r\n","import KeyBoard from './input/Keyboard'\r\nimport KeyPad from './widgets/KeyPad'\r\nimport Kick from './audio/Kick'\r\nimport Snare from './audio/Snare'\r\nimport { ESoundType } from '../enum/ESoundType'\r\n\r\n/*const playKick = keyBoard => {\r\n  const kick = new Kick(keyBoard.context, 150)\r\n  kick.play(false, keyBoard.context.currentTime)\r\n}\r\n\r\nconst playSnare = keyBoard => {\r\n  const snare = new Snare(keyBoard.context, 100, 1000, 'highpass', 'triangle')\r\n  snare.play(false, keyBoard.context.currentTime)\r\n}*/\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const keyBoard = new KeyBoard()\r\n  const keyPad = new KeyPad('keyPad', keyBoard)\r\n  const kickButton = document.getElementById('kick')\r\n  const snareButton = document.getElementById('snare')\r\n\r\n  //kickButton.addEventListener('click', () => playKick(keyBoard))\r\n  //snareButton.addEventListener('click', () => playSnare(keyBoard))\r\n  keyBoard.registerKey('a', 261.63)\r\n  keyBoard.registerKey('s', 293.66)\r\n  keyBoard.registerKey('d', 329.63)\r\n  keyBoard.registerKey('f', 349.23)\r\n  keyBoard.registerKey('g', 392.00)\r\n  keyBoard.registerKey('h', 440)\r\n  keyBoard.registerKey('j', 493.88)\r\n  keyBoard.registerKey('k', 523.25)\r\n  keyBoard.registerKey('q', 150, ESoundType.KICK)\r\n  keyBoard.registerKey('w', 100, ESoundType.SNARE)\r\n  keyPad.addAllKeys()\r\n})\r\n"],"sourceRoot":""}